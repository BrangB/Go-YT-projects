basePath: /
definitions:
  models.Room:
    type: object
  models.User:
    type: object
host: localhost:4000
info:
  contact:
    email: youremail@provider.com
    name: API Support
  description: This is a simple API for voting system.
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: Gin Voting API
  version: "1.0"
paths:
  /createRoom:
    post:
      consumes:
      - application/json
      description: Create a room for voting with title and description
      parameters:
      - description: Room Data
        in: body
        name: room
        required: true
        schema:
          $ref: '#/definitions/models.Room'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Room'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create a new voting room
      tags:
      - VotingRoom
  /getRoom:
    post:
      consumes:
      - application/json
      description: Retrieve all voting rooms created by a specific owner
      parameters:
      - description: Owner ID
        in: body
        name: owner_id
        required: true
        schema:
          type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Room'
            type: array
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get voting rooms by owner ID
      tags:
      - VotingRoom
  /login:
    post:
      consumes:
      - application/json
      description: Log in with email and password
      parameters:
      - description: User Data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Log in a user
      tags:
      - Auth
  /signup:
    post:
      consumes:
      - application/json
      description: Register a new user with email and password
      parameters:
      - description: User Data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create a new user
      tags:
      - Auth
  /validate:
    get:
      description: Validate the JWT of a logged-in user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Validate a user token
      tags:
      - Auth
swagger: "2.0"
